#!/usr/bin/env python
"""
swift-recon-cron.py
"""

import os
import sys
import optparse
import tempfile
import simplejson as json
from ConfigParser import ConfigParser
from swift.common.utils import get_logger


def async_count(device_dir, logger):
    async_count = 0
    for i in os.listdir(device_dir):
        asyncdir = os.path.join(device_dir, i, "async_pending")
        if os.path.isdir(asyncdir):
            for entry in os.listdir(asyncdir):
                if os.path.isdir(os.path.join(asyncdir, entry)):
                    async_hdir = os.path.join(asyncdir, entry)
                    async_count += len(os.listdir(async_hdir))
    return async_count


def last_replication_log(logfile, logger):
    lastlog = None
    try:
        with open(logfile) as replog:
            for line in replog:
                if "Object replication complete." in line:
                    lastlog = line
        if lastlog:
            return float(lastlog.split(" ")[8].lstrip('('))
        else:
            return None
    except IOError as e:
        logger.critical("%s" % e)
        return None


def dump_recon_cache(stats, cache_file):
    with tempfile.NamedTemporaryFile(delete=False) as tf:
        tf.write(json.dumps(stats) + '\n')
    os.rename(tf.name, cache_file)


def main():
    c = ConfigParser()
    try:
        conf_path = sys.argv[1]
        log_source = sys.argv[2]
    except Exception:
        print "Usage: %s CONF_FILE LOG_SOURCE" % sys.argv[0].split('/')[-1]
        sys.exit(1)
    if not c.read(conf_path):
        print "Unable to read config file %s" % conf_path
        sys.exit(1)
    if not os.path.isfile(log_source):
        print "Path to log source is invalid."
    conf = dict(c.items('filter:recon'))
    device_dir = conf.get('devices', '/srv/node')
    recon_cache_path = conf.get('recon_cache_path', '/var/cache/swift')
    cache_file = os.path.join(recon_cache_path, "object.recon")
    conf['log_name'] = conf.get('log_name', 'recon-cron')
    logger = get_logger(conf, log_route='recon-cron')
    try:
        os.mkdir("/var/lock/swift-recon-object-cron")
    except OSError as e:
        logger.critical("%s" % e)
        sys.exit(1)
    stats = {}
    stats['async_pending'] = async_count(device_dir, logger)
    repcount = last_replication_log(log_source, logger)
    if repcount:
        stats['object_replication_time'] = repcount
    dump_recon_cache(stats, cache_file)
    os.rmdir("/var/lock/swift-recon-object-cron")


if __name__ == '__main__':
    main()
